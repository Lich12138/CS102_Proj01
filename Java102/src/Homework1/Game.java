package Homework1;

import java.util.Iterator;
import java.util.LinkedList;

public class Game {
	
	public LinkedList<LinkedList<Integer>> ll;			//locations of the players
	private LinkedList<Integer> sl;						//scores of the players
	private int p;										//number of the players
	private Board b;									//the board
	
	public Game() {}									//test mode
	
	public Game(int n ) {								//n - number of players
		p = n;
		b = new Board();
		ll = new LinkedList<LinkedList<Integer>>();
		sl = new LinkedList<Integer>();
		for(int i = 0; i < p; i++) {
			ll.add(new LinkedList<Integer>());
			ll.get(i).add(new Integer(-1));
			sl.add(new Integer(0));						//setting initial conditions before the game
		}
	}
	
	public void game() {
		Iterator<Integer> it = sl.iterator();			//find the leading player
		int max = 0;
		while(it.hasNext()) {
			int curr = it.next().intValue();
			if(curr > max)
				max = curr;
		}
		while(max < 40) {								//continue the game
			round();
		}
	}
	
	private void round() {								//one round is defined as all players roll dice once
		for(int i = p; i > 0; i--) {
			next();
			System.out.print("plays 1 round\n");
		}
	}

	private void next() {							
														//movement of the current player
		Integer step = (int) (Math.random() * 6);		//the random number generated by the dice 
		int addstep = step + ll.element().getLast();	//determine if the location is out of bound
		if(addstep > b.length())
			ll.element().add(-1);
		else
			ll.element().add(addstep);					//add the new position to the end of the list 
														//passive movement of the player influenced 
		for(int i = 1; i < p; i++) {
			if(ll.element().getLast().intValue() == ll.get(i).getLast().intValue()) {
				int retro = ll.get(i).removeLast() - 3;
				if (retro < 0) 
					ll.get(i).add(new Integer(0));
				else
					ll.get(i).add(new Integer(ll.get(i).removeLast() - 3));
			}
		}
														//calculate the new score, and move to 0 when the score is multiple of 4
		int newscore = sl.remove().intValue() + getScore(ll.element().getLast().intValue()); //original value + value gain from this round 
		sl.addFirst(new Integer(newscore));
		if(newscore % 4 == 0) {							//if divisible by 4 then location changes to 0 
			ll.element().removeLast();
			ll.element().add(0);
		}
														//putting the next player to the first place of the lists 
		sl.add(sl.removeFirst());
		ll.add(ll.removeFirst());
	}
	
	private int getScore(int loc) {
		if(loc == -1) 
			return 0;
		else
			return b.score(loc);
	}
}
